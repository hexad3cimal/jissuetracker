package com.jissuetracker.webapp.models;
// Generated 9 Feb, 2016 6:00:21 PM by Hibernate Tools 4.0.0

import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;

/**
 * User generated by hbm2java
 */
@Entity
@Table(name = "user", catalog = "IssueTracker", uniqueConstraints = @UniqueConstraint(columnNames = "email") )
public class User implements java.io.Serializable {

	private Integer id;
	private Roles roles;
	private String name;
	private String email;
	private String password;
	private Set<Projects> projectses = new HashSet<Projects>(0);
	private Set<Issues> issuesesForAssignedToId = new HashSet<Issues>(0);
	private Set<IssuesUpdates> issuesUpdateses = new HashSet<IssuesUpdates>(0);
	private Set<Issues> issuesesForCreatedById = new HashSet<Issues>(0);

	public User() {
	}

	public User(String email, String password) {
		this.email = email;
		this.password = password;
	}

	public User(Roles roles, String name, String email, String password, Set<Projects> projectses,
			Set<Issues> issuesesForAssignedToId, Set<IssuesUpdates> issuesUpdateses,
			Set<Issues> issuesesForCreatedById) {
		this.roles = roles;
		this.name = name;
		this.email = email;
		this.password = password;
		this.projectses = projectses;
		this.issuesesForAssignedToId = issuesesForAssignedToId;
		this.issuesUpdateses = issuesUpdateses;
		this.issuesesForCreatedById = issuesesForCreatedById;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)

	@Column(name = "id", unique = true, nullable = false)
	public Integer getId() {
		return this.id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "roleId")
	public Roles getRoles() {
		return this.roles;
	}

	public void setRoles(Roles roles) {
		this.roles = roles;
	}

	@Column(name = "name", length = 100)
	public String getName() {
		return this.name;
	}

	public void setName(String name) {
		this.name = name;
	}

	@Column(name = "email", unique = true, nullable = false, length = 100)
	public String getEmail() {
		return this.email;
	}

	public void setEmail(String email) {
		this.email = email;
	}

	@Column(name = "password", nullable = false, length = 20)
	public String getPassword() {
		return this.password;
	}

	public void setPassword(String password) {
		this.password = password;
	}

	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "projectUserAssociation", catalog = "IssueTracker", joinColumns = {
			@JoinColumn(name = "userId", nullable = false, updatable = false) }, inverseJoinColumns = {
					@JoinColumn(name = "projectId", nullable = false, updatable = false) })
	public Set<Projects> getProjectses() {
		return this.projectses;
	}

	public void setProjectses(Set<Projects> projectses) {
		this.projectses = projectses;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "userByAssignedToId")
	public Set<Issues> getIssuesesForAssignedToId() {
		return this.issuesesForAssignedToId;
	}

	public void setIssuesesForAssignedToId(Set<Issues> issuesesForAssignedToId) {
		this.issuesesForAssignedToId = issuesesForAssignedToId;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
	public Set<IssuesUpdates> getIssuesUpdateses() {
		return this.issuesUpdateses;
	}

	public void setIssuesUpdateses(Set<IssuesUpdates> issuesUpdateses) {
		this.issuesUpdateses = issuesUpdateses;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "userByCreatedById")
	public Set<Issues> getIssuesesForCreatedById() {
		return this.issuesesForCreatedById;
	}

	public void setIssuesesForCreatedById(Set<Issues> issuesesForCreatedById) {
		this.issuesesForCreatedById = issuesesForCreatedById;
	}

}
